import traceback
from enum import Enum
from urllib.parse import urlparse, parse_qs


class ReportType(Enum):
    # –æ—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    CAT = {
        'name': '–¢—Ä–µ–Ω–¥—ã –ø–æ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
        'url': 'https://mpstats.io/api/wb/get/category/trends',
        'msg': '‚úÖ–û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å—É: '
    }
    # –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
    SUBJ = {
        'name': '–¢—Ä–µ–Ω–¥—ã –ø–æ –ü—Ä–µ–¥–º–µ—Ç–∞–º',
        'url': 'https://mpstats.io/api/wb/get/subject/trends',
        'msg': '‚úÖ–û—Ç—á–µ—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: id '
    }


class ErrorsMsg(Enum):
    URL = 'üò°–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ '
    OTHER = 'üò•–ò–∑–≤–∏–Ω–∏—Ç–µ.. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞'
    REPEAT = 'üò•–î–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'


def parse_url(url: str) -> tuple[ReportType, str] | tuple[bool, None]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param url: —Å—Å—ã–ª–∫–∞
    :return:
    """
    try:
        if 'mpstats.io/wb/' not in url or 'https://' not in url or ' ' in url:
            return False, None
        query_url = None
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)
        # –æ–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if 'mpstats.io/wb/category/trends' in url:
            query_url = query_params.get('url')
        # –æ–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
        if 'mpstats.io/wb/subject/trends' in url:
            query_url = query_params.get('id')
        if query_url:
            return ReportType.SUBJ, query_url[0]
        return False, None
    except Exception:
        traceback.print_exc()
        return False, None


if __name__ == '__main__':
    pass
